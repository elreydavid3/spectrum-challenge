{"version":3,"sources":["Components/RestaurantData.js","Components/Pagination.js","App.js","index.js"],"names":["RestaurantData","restaurantData","loading","console","log","map","restaurant","key","id","name","city","state","telephone","genre","split","sort","join","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","className","number","onClick","href","App","useState","setRestaurantData","currentPage","setCurrentPage","query","setQuery","useEffect","a","fetch","headers","Authorization","res","json","data","sortedDataNames","b","fa","toLowerCase","fb","fetchData","rows","reSort","sortedField","newSort","indexOfLastRestaurant","indexOfFirstRestaurant","currentPosts","slice","placeholder","type","value","onChange","e","target","filter","row","indexOf","length","pageNumber","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7cb235aa.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction RestaurantData({ restaurantData, loading }) {\n  if (loading) {\n    console.log(\"loading\");\n  }\n\n  return (\n    <>\n      {restaurantData.map((restaurant) => (\n        <tr key={restaurant.id}>\n          <td>{restaurant.name}</td>\n          <td>{restaurant.city}</td>\n          <td>{restaurant.state}</td>\n          <td>{restaurant.telephone}</td>\n          <td>{restaurant.genre.split(\",\").sort().join()}</td>\n        </tr>\n      ))}\n    </>\n  );\n}\n\nexport default RestaurantData;\n","import React from \"react\";\n\nfunction Pagination({ postsPerPage, totalPosts, paginate }) {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n  return (\n    <div>\n      <ul className=\"pagination\">\n        {pageNumbers.map((number) => (\n          <li key={number} className=\"page-item\">\n            <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\n              {number}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Pagination;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport RestaurantData from \"./Components/RestaurantData\";\nimport Pagination from \"./Components/Pagination\";\n\n\n\nfunction App() {\n  const [restaurantData, setRestaurantData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n  const [query, setQuery] = useState(\"\");\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(\n          \"https://code-challenge.spectrumtoolbox.com/api/restaurants/\",\n          {\n            headers: {\n              Authorization: \"Api-Key q3MNxtfep8Gt\",\n            },\n          }\n        );\n        const data = await res.json();\n        let sortedDataNames = data.sort((a, b) => {\n          let fa = a.name.toLowerCase(),\n            fb = b.name.toLowerCase();\n\n          if (fa < fb) {\n            return -1;\n          }\n          if (fa > fb) {\n            return 1;\n          }\n          return 0;\n        });\n        setRestaurantData(sortedDataNames);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n\n  const reSort = (sortedField) =>{\n    if (sortedField !== null) {\n      const newSort =[...restaurantData].sort((a, b) => {\n        let fa = a[sortedField].toLowerCase(),\n            fb = b[sortedField].toLowerCase();\n        if (fa < fb) {\n          return -1;\n        }\n        if (fa > fb) {\n          return 1;\n        }\n        return 0;\n        \n      });\n      setRestaurantData(newSort)\n    }\n   \n    \n  }\n\n\n\n\n\n  //get current posts of restaurants\n  const indexOfLastRestaurant = currentPage * postsPerPage;\n  const indexOfFirstRestaurant = indexOfLastRestaurant - postsPerPage;\n  const currentPosts = restaurantData.slice(\n    indexOfFirstRestaurant,\n    indexOfLastRestaurant\n  );\n  \n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n\n  //search with searchbar to to filter table by name, city & genre\n  const search = (rows) =>{\n    return rows.filter(\n      (row) =>\n        row.name.toLowerCase().indexOf(query.toLowerCase()) > -1 ||\n        row.city.toLowerCase().indexOf(query.toLowerCase()) > -1 ||\n        row.genre.toLowerCase().indexOf(query.toLowerCase()) > -1 ||\n        row.state.toLowerCase().indexOf(query.toLowerCase()) > -1\n    );\n  }\n  \n \n\n  return (\n    <div className=\"App\">\n      <h1>Restaurant App</h1>\n      <br />\n\n      <input\n        placeholder=\"type name, city, or genre\"\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n    \n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>City</th>\n            <th>\n              <button onClick={() =>\n                reSort('state')\n                }>\n                State\n              </button>\n            </th>\n            <th>Phone</th>\n            <th>\n              <button onClick={() =>\n                reSort('genre')\n              }>\n                Genre\n                </button>\n              </th>\n          </tr>\n        </thead>\n        <tbody id=\"tableData\">\n          <RestaurantData\n            restaurantData={search(currentPosts)}\n          />\n        </tbody>\n      </table>\n  \n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={restaurantData.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}